package com.machinespray.osfeloader.frame;

import com.machinespray.osfeloader.Main;
import com.machinespray.osfeloader.handler.LuaHandler;
import com.machinespray.osfeloader.handler.MouseHandler;
import com.machinespray.osfeloader.handler.SaveHandler;
import com.machinespray.osfeloader.xml.XmlHolder;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;

public class DialogDisplaySpells extends JDialog {
	public JTree spellDisplay;
	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;
	private JTree artifactDisplay;
	private JTabbedPane tabbedPane1;
	private JCheckBox experimental;
	private JButton buttonHelp;
	private ArrayList<Image> icons = new ArrayList<>();


	public DialogDisplaySpells() {
		//Show on taskbar
		super((Dialog) null, "OSFE Mod Loader");
		icons.add(new ImageIcon(getClass().getResource("/Icons/icon.png")).getImage());
		icons.add(new ImageIcon(getClass().getResource("/Icons/icon2.png")).getImage());
		setIconImages(icons);
		$$$setupUI$$$();
		setContentPane(contentPane);
		setModal(true);
		getRootPane().setDefaultButton(buttonOK);

		buttonOK.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				onOK();
			}
		});

		buttonCancel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				onCancel();
			}
		});

		// call onCancel() when cross is clicked
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				onCancel();
			}
		});

		// call onCancel() on ESCAPE
		contentPane.registerKeyboardAction(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				onCancel();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
		MouseHandler mouseHandler = new MouseHandler();
		spellDisplay.addMouseListener(mouseHandler);
		artifactDisplay.addMouseListener(mouseHandler);
		buttonHelp.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				onHelp();
			}
		});
		experimental.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				onExperimentalEnable(e);
			}
		});
	}

	private void onExperimentalEnable(ActionEvent e) {
		if (getExperimental())
			JOptionPane.showMessageDialog(null, "Be careful! Not leaving enough of a category enabled can cause issues!");
	}

	public boolean getExperimental() {
		return experimental.isSelected();
	}

	private void onHelp() {
		try {
			Desktop.getDesktop().browse(URI.create("https://github.com/machinespray/OSFEModLoader/wiki/Mod-Loading"));
		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, "Error opening help page!");
		}
	}

	private void onOK() {
		try {
			for (XmlHolder holder : Main.simpleSolutions)
				SaveHandler.doOutput(holder);
			new LuaHandler().migrateLua();
		} catch (Exception e) {
			Main.handleError(e);
		}
		dispose();
		JOptionPane.showMessageDialog(null, "Done!");
	}

	private void onCancel() {
		// add your code here if necessary
		dispose();
		System.exit(0);
	}

	private void createUIComponents() {
		spellDisplay = Main.simpleSolutions[0].getTree();
		artifactDisplay = Main.simpleSolutions[1].getTree();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		contentPane = new JPanel();
		contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(10, 10, 10, 10), -1, -1));
		contentPane.setDoubleBuffered(true);
		contentPane.setName("SpellList");
		contentPane.setPreferredSize(new Dimension(350, 250));
		tabbedPane1 = new JTabbedPane();
		contentPane.add(tabbedPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(300, 200), null, 0, false));
		final JScrollPane scrollPane1 = new JScrollPane();
		scrollPane1.setAutoscrolls(false);
		tabbedPane1.addTab("Spells", scrollPane1);
		spellDisplay.setName("spellDisplay");
		spellDisplay.setRootVisible(false);
		spellDisplay.putClientProperty("JTree.lineStyle", "");
		scrollPane1.setViewportView(spellDisplay);
		final JScrollPane scrollPane2 = new JScrollPane();
		tabbedPane1.addTab("Artifacts", scrollPane2);
		artifactDisplay.setRootVisible(false);
		scrollPane2.setViewportView(artifactDisplay);
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
		tabbedPane1.addTab("Info and Settings", panel1);
		experimental = new JCheckBox();
		experimental.setText("Allow Disabling Vanilla Spawns");
		panel1.add(experimental, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
		panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
		panel1.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		buttonHelp = new JButton();
		buttonHelp.setText("Help!");
		panel1.add(buttonHelp, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonOK = new JButton();
		buttonOK.setText("OK");
		contentPane.add(buttonOK, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonCancel = new JButton();
		buttonCancel.setText("Cancel");
		contentPane.add(buttonCancel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}
}
